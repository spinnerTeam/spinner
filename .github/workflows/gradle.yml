name: Java CI with Gradle

on:
  pull_request:
    branches: [ "master" ]

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      DOMAIN_URL: ${{ vars.DOMAIN_URL }}
      DATABASE_URL: ${{ vars.DATABASE_URL }}
      DATABASE_USERNAME: ${{ vars.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      REDIS_HOST: ${{ vars.REDIS_HOST }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      JWT_ISSUER: ${{ vars.JWT_ISSUER }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
      S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
      S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
      S3_REGION: ${{ vars.S3_REGION }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Spring Boot 어플리케이션 Build
      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # Docker 이미지 Build
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKER_ID }}/spinner .

      # DockerHub Login (push 하기 위해)
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PW }}

      # Docker hub 로 push
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKER_ID }}/spinner

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      - name: docker pull
        run : sudo docker pull ${{ secrets.DOCKER_ID }}/spinner

      - name: Stop and remove existing container
        run: |
          if [ $(sudo docker ps -a -q -f name=spinner) ]; then
            sudo docker stop spinner
            sudo docker rm spinner
          fi

      - name: delete old docker image
        run: sudo docker system prune -f

      # .env 파일 생성 단계 추가
      - name: Create .env file
        run: |
          echo "DOMAIN_URL=${{ vars.DOMAIN_URL }}" > .env
          echo "DATABASE_URL=${{ vars.DATABASE_URL }}" >> .env
          echo "DATABASE_USERNAME=${{ vars.DATABASE_USERNAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "REDIS_HOST=${{ vars.REDIS_HOST }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "JWT_ISSUER=${{ vars.JWT_ISSUER }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env
          echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> .env
          echo "S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }}" >> .env
          echo "S3_REGION=${{ vars.S3_REGION }}" >> .env

      # Docker 컨테이너 실행 시 .env 파일을 적용하도록 변경
      - name: docker run new container
        run: sudo docker run -it -d -p 80:3030 --name spinner --env-file .env ${{ secrets.DOCKER_ID }}/spinner